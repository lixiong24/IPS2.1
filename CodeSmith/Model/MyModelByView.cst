<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Src="..\Common.cs" Inherits="CommonFunction.Common" Debug="False" Description="Template description here." %>
<%@ Property Name="DevelopersName" Type="String" Category="Context" Default="lixiong" Description="The name to include in the comment header" %>
<%@ Property Name="NameSpace" Type="String" Category="Context" Default="lixiong.Project" Description="The namespace to use for this class" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="Context" Optional="false" Description="Database that the documentation should be based on." %>
<%@ Property Name="View" Type="SchemaExplorer.ViewSchema " Category="Context" Optional="True" Description="Table that the object is based on." %>

<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>

<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
// =================================================================== 
// 项目说明,功能实体类,用CodeSmith自动生成。
// =================================================================== 
// File: <%=GetEntityClassName(View) %>.cs
// 修改日志如下：<%=DateTime.Now.ToString() %>: <%=DevelopersName %>  Original Version
// =================================================================== 
using System;
using System.Data;

namespace <%= NameSpace %>.Model
{
	/// <summary>
	/// 数据库视图：<%= View.Name %> 的实体类.
	/// </summary>
	[Serializable]
    public class <%=GetModelClassName(View) %>
	{
		#region Private Variables
		<% foreach (ViewColumnSchema column in View.Columns) { %>
		<%= GetMemberVariableDeclarationStatement("private",column) %>
		<% } %>
		#endregion
		
		#region Constructors
	    public <%=GetEntityClassName(View) %>()
		{
			
		}
		public <%=GetEntityClassName(View) %>(bool populateDefaultValue) : this()
		{
			if(populateDefaultValue)
			{
				<% foreach (ViewColumnSchema column in View.Columns) { %>
				<%= GetMemberVariableName(column) + (new String(' ', GetPropertyNameMaxLength(View) - GetPropertyNameLength(column))) %> = <% = GetCSDefaultByType(column) %>;
				<% } %>
			}
		}
		public <%=GetEntityClassName(View) %>(
			<%= GetConstructorParameters(View) %>
		)
		{
			<%= GetAssignValue(View) %>
		}
		#endregion
		
		#region Properties
		<% for (int i = 0; i < View.Columns.Count; i++) { %>
		public <%= GetCSType(View.Columns[i]) %> <%= GetPropertyName(View.Columns[i]) %>
		{
			get {return <%= GetMemberVariableName(View.Columns[i]) %>;}
			set {<%= GetMemberVariableName(View.Columns[i]) %> = value;}
		}
		<% } %>
		#endregion
	}
}

